{
    'defaults': {
        #  These defaults are applied globally to the context used when running all tasks.
        #  The values will only be used if they are not present in the environment or
        #  in the task-specified configurations.
        #
        #  The PATH value here will be used if no PATH was set in the environment when
        #  "taskforce" was started.  If security or other concerns justify mandate a
        #  specific PATH, the value can be set in the 'defines' section.  It can also
        #  be overriden for each task.
        #
        "PATH": "/usr/bin:/usr/sbin:/bin:/usr/local/bin:/usr/local/sbin",

        #  The EXAMPLES_BASE is a hook to allow the example script "run" to specify
        #  the base directory to be used.  In this example, if EXAMPLES_BASE is not
        #  set in the environment, "taskforce" will run from the root directory.
        #
        "EXAMPLES_BASE": "",
    },
    'defines': {
        #  These defines are also global.  They will override environment values
        #  if present but will be overridden by task-specific defines.
        #
        "piddir": "{EXAMPLES_BASE}/var/run",
        "ntpd_conf": "/etc/ntp.conf",
        "confdir": "/usr/local/etc",
        "wsurl": "wss://localhost:9000/"
    },
    'settings': {
        "http": [
            {
                #  Set up a default HTTP service which allows control operations.
                #  The default service listens on httpd.def_address, normally
                #  "/var/run/taskforce.sock".
                #
                "allow_control": true
            },
            {
                #  Set up a second HTTP service providing status-only access
                #  on all interfaces.  The certfile setting means the service
                #  will use SSL.  Mentioning the port here is actually redundant
                #  because 8443 is the default.
                #
                "listen": "0.0.0.0:8443",
                "certfile": "{EXAMPLES_BASE}/etc/sslcert.pem"
            }
        ]
    },
    'tasks': {
        "timeset": {
            #  This task is run once when "taskforce" first starts.  It simulates
            #  running the base time setting operation of "ntpd" which is similar
            #  to using "ntpdate" but does not require a separate time service
            #  configuration.
            #
            'control': "once",

            #  The "commands" section defines one or more lists which are used
            #  to run commands.  Each task must have at least one command, the
            #  "start" command.  Refere to the "commands" description for other
            #  possible commands.
            #
            'commands': { "start": ["ntpd", "-c", "{ntpd_conf}", "-n", "-g", "-q"] },
        },
        "ntpd": {
            #  The "ntpd" task is started when the "timeset" command has completed,
            #  indicated by the "requires" list.  The "wait" control indicates the
            #  command will be restarted if it exists.
            #
            'control': "wait",
            'requires': [ "timeset" ],

            #  "pidfile" will be used internally by "taskforce" in the future (see
            #  description).  It also sets the "Task_pidfile" context value so the
            #  value will remain consistent between "taskforce" and the task.
            #
            'pidfile': "{piddir}/{Task_name}.pid",
            'defines': {
                "keys": "/etc/ntp/ntp.keys",
                "drift": "/var/db/ntpd.drift"
            },

            #  This "start" command includes a more complex list expression (see
            #  'Values and Lists'), allowing the "run" script to cause the task to
            #  exit after a random interval (via the "-x" flag).  Using this option
            #  means the example will demonstrate task startup interaction (see the
            #  "onexit" element below).
            #
            'commands': {
                "start": [
                    "{Task_name}",
                        "-c", "{ntpd_conf}",
                        "-p", "{Task_pidfile}",
                        "-f", "{drift}",
                        "-n",
                        {"MINSLEEP": [
                            "--min-sleep", "{MINSLEEP}", {
                                "SLEEPRANGE": ["--sleep-range", "{SLEEPRANGE}"]
                            }
                        ]}
                ]
            },
            #  This event causes "ntpd" to restart if either the configuration
            #  file or the ntpd keys files change.  A "self" event has not been
            #  included so "ntpd" would not restart if the executable was updated,
            #  probably because such updates tend to coincide with a broad O/S
            #  upgrade that requires a server-reboot.
            #
            'events': [
                { "type": "file_change", "path": [ "{ntpd_conf}", "{keys}" ],
                  "command": "stop" }
            ],

            #  The "onexit" setting causes the "timeset" task to be rerun if ever the "ntpd"
            #  task exits.  "ntpd" will then re-wait for the "timeset" task to complete.
            #
            #  This interaction is actually a real-world case for ntpd.  If the system
            #  time gets wildly off, ntpd will panic and exit.  If ntpd is then just blindly
            #  restarted, it will continue to exit.  By triggering "timeset" after each
            #  exit, the time can be resynchronized before "ntpd" is restarted.
            #
            'onexit': [
                { "type": "start", "task": "timeset" }
            ]
        },
        "haproxy": {
            #  This task has 'roles' specified.  That means the task will only
            #  be started if the "frontend" role is present in the roles file.
            #
            #  Roles allow a single configuration file to be used for multiple
            #  deployment styles, given a global view of an entire system.
            #  That ensures that changes to configurations for tasks that are
            #  common to multiple roles are consisent across the deployment.
            #  However, it is perfectly reasonable to use a separate configuration
            #  for each host type if the global view is not needed or becomes
            #  cumbersome.
            #
            'control': "wait",
            'roles': [ "frontend" ],
            'requires': [ "ntpd" ],

            #  The 'start_delay' here means that other tasks that require this
            #  task will not be started for at least 1 second after this task
            #  starts.
            #
            'start_delay': 1,
            'defines': { "conf": "{confdir}/haproxy.conf" },
            'commands': {
                "start": [ "{Task_name}", "-f", "{conf}" ]
            },
            'events': [
                #  Here, a "self" event is used so the task will be restarted if
                #  the "haproxy" executable is updated.  That choice might be made
                #  if there is an expectation that "haproxy" will be updated frequently
                #  possibly because it includes locally supported modifications.
                #
                { "type": "self", "command": "stop" },
                { "type": "file_change", "path": [ "{conf}" ], "command": "stop" }
            ]
        },
        "httpd": {
            #  The "httpd" task is set to run if either or both "frontend"
            #  and "backend" roles are active.  With only these two roles
            #  in use, this is the equivalent of specifying no 'roles'.
            #  The advantage of enumerating them is that if an additional
            #  role is added, the task would not automatically be started
            #  for that role.  In the case of the "ntpd" task there is
            #  an expectation that this would be run on a server regardless
            #  of that server's role.
            #
            'control': "wait",
            'roles': [ "frontend", "backend" ],
            'requires': [ "ntpd" ],
            'start_delay': 1,
            'defines': {
                "conf": "{confdir}/httpd-inside.conf"
            },

            #  The 'role_defines' value here sets the configuration
            #  according to what role is active.  The default is
            #  to use the "inside" configuration which would possibly
            #  cover web-based administrative operations.
            #
            #  If the "frontend" role is active, this value will
            #  be overridden and the outside-facing web application
            #  would be used.
            #
            #  If both roles are active, the "frontend" role will
            #  trump the "backend" role.
            #
            'role_defines': {
                "frontend": { "conf": "{confdir}/httpd-outside.conf" },
            },
            'pidfile': "{piddir}/{Task_name}.pid",
            'commands': {
                "start": [ "{Task_name}", "-f", "{conf}" ]
            },
            'events': [
                { "type": "self", "command": "stop" },
                { "type": "file_change",
                    "path": [
                        "{conf}",
                        "{confdir}/httpd-ssl.conf",
                        "/var/apache/conf/server.crt"
                    ],
                    "command": "stop" }
            ]
        },
        "ws_server": {
            #  The "ws_server" task is set to only start once the "httpd"
            #  task has started.
            #
            'control': "wait",
            'roles': [ "frontend" ],
            'requires': [ "httpd" ],

            #  This is set up to start 4 instances of this process.
            #
            'count': 4,

            #  Using the {Task_instance} value ensures that the pidfile is
            #  unique for each process, and will be a consistent set of names
            #  across multiple taskforce executions.
            #
            'pidfile': "{piddir}/{Task_name}-{Task_instance}.pid",
            'commands': {
                "start": [ "{Task_name}", "-l", "{wsurl}", "-p", "{Task_pidfile}" ]
            },
            'events': [
                #  The "python" event type requires that the task be written in
                #  Python.  The task is then examined and will be restarted in
                #  any of the non-system modules change.  This is useful because
                #  python applications tend to be implemented as a wrapper script
                #  that implements most of its functions via classes and modules.
                #  The python event type ensures that long-running python applications
                #  are always running the latest modules.
                #
                { "type": "python", "command": "stop" }
            ]
        },
        "db_server": {
            #  The "db_server" task is set to only run if the
            #  "backend" role is active.
            #
            'control': "wait",
            'roles': [ "backend" ],
            'requires': [ "httpd" ],
            'defines': { "conf": "{confdir}/db.conf" },
            'pidfile': "{piddir}/{Task_name}.pid",
            'commands': {
                "start": [ "{Task_name}", "-c", "{conf}", "-n", "-p", "{Task_pidfile}" ]
            },
            'events': [
                { "type": "self", "command": "stop" },

                #  The "file_change" event will fire if the db_server configuration
                #  file changes.  In this case, the action is to signal the db_server
                #  process with SIGHUP, which presumably will cause it to reread
                #  its configuration.
                #
                { "type": "file_change", "path": [ "{conf}" ], "signal": "HUP" }
            ]
        },
    }
}
