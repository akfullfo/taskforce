{
    'defaults': {
        #  These defaults are applied globally to the context used when running all tasks.
        #  The values will only be used if they are not present in the environment or
        #  in the task-specified configurations.
        #
        #  The PATH value here will be used if no PATH was set in the environment when
        #  "taskforce" was started.  If security or other concerns justify mandate a
        #  specific PATH, the value can be set in the 'defines' section.  It can also
        #  be overriden for each task.
        #
        "PATH": "/usr/bin:/usr/sbin:/bin:/usr/local/bin:/usr/local/sbin",

        #  The EXAMPLES_BASE is a hook to allow the example script "run" to specify
        #  the base directory to be used.  In this example, if EXAMPLES_BASE is not
        #  set in the environment, "taskforce" will run from the root directory.
        #
        "EXAMPLES_BASE": "",
    },
    'defines': {
        #  These defines are also global.  They will override environment values
        #  if present but will be overridden by task-specific defines.
        #
        "piddir": "{EXAMPLES_BASE}/var/run",
        "ntpd_conf": "/etc/ntp.conf",
        "confdir": "/usr/local/etc",
        "wsurl": "wss://localhost:9000/"
    },
    'tasks': {
        "timeset": {
            #  This task is run once when "taskforce" first starts.  It simulates
            #  running the base time setting operation of "ntpd" which is similar
            #  to using "ntpdate" but does not require a separate time service
            #  configuration.
            #
            'control': "once",

            #  The "commands" section defines one or more lists which are used
            #  to run commands.  Each task must have at least one command, the
            #  "start" command.  Refere to the "commands" description for other
            #  possible commands.
            #
            'commands': { "start": ["ntpd", "-c", "{ntpd_conf}", "-n", "-g", "-q"] },
        },
        "ntpd": {
            #  The "ntpd" task is started when the "timeset" command has completed,
            #  indicated by the "requires" list.  The "wait" control indicates the
            #  command will be restarted if it exists.
            #
            'control': "wait",
            'requires': [ "timeset" ],

            #  "pidfile" will be used internally by "taskforce" in the future (see
            #  description).  It also sets the "Task_pidfile" context value so the
            #  value will remain consistent between "taskforce" and the task.
            #
            'pidfile': "{piddir}/{Task_name}.pid",
            'defines': {
                "keys": "/etc/ntp/ntp.keys",
                "drift": "/var/db/ntpd.drift"
            },

            #  The "start" command includes a more complex list expression, allowing
            #  the "run" script to cause the task to exit after a random interval
            #  (via the "-x" flag).  Using this option means the example will demonstrate
            #  task startup interaction (see the "onexit" element below).
            #
            'commands': {
                "start": [
                    "{Task_name}",
                        "-c", "{ntpd_conf}",
                        "-p", "{Task_pidfile}",
                        "-f", "{drift}",
                        "-n",
                        {"MINSLEEP": ["--min-sleep", "{MINSLEEP}", {"SLEEPRANGE": ["--sleep-range", "{SLEEPRANGE}"]}]}
                ]
            },
            'events': [
                { "type": "file_change", "path": [ "{ntpd_conf}", "{keys}" ], "command": "stop" }
            ],

            #  The "onexit" setting causes the "timeset" task to be rerun if ever the "ntpd"
            #  task exits.  "ntpd" will then re-wait for the "timeset" task to complete.
            #
            #  This interaction is actually a real-world case for ntpd.  If the system
            #  time gets wildly off, ntpd will panic and exit.  If ntpd is then just blindly
            #  restarted, it will continue to exit.  By triggering "timeset" after each
            #  exit, the time can be resynchronized before "ntpd" is restarted.
            #
            'onexit': [
                { "type": "start", "task": "timeset" }
            ]
        },
        "haproxy": {
            'control': "wait",
            'roles': [ "frontend" ],
            'requires': [ "ntpd" ],
            'start_delay': 1,
            'defines': { "conf": "{confdir}/haproxy.conf" },
            'commands': {
                "start": [ "{Task_name}", "-f", "{conf}" ]
            },
            'events': [
                { "type": "self", "command": "stop" },
                { "type": "file_change", "path": [ "{conf}" ], "command": "stop" }
            ]
        },
        "httpd": {
            'control': "wait",
            'roles': [ "frontend", "backend" ],
            'requires': [ "ntpd" ],
            'start_delay': 1,
            'defines': {
                "conf": "/usr/local/etc/httpd.conf"
            },
            'role_defines': {
                "frontend": { "conf": "{confdir}/httpd-outside.conf" },
                "backend": { "conf": "{confdir}/httpd-inside.conf" }
            },
            'pidfile': "{piddir}/{Task_name}.pid",
            'commands': {
                "start": [ "httpd", "-f", "{conf}" ]
            },
            'events': [
                { "type": "self", "command": "stop" },
                { "type": "file_change", "path": [ "{conf}", "{confdir}/httpd-ssl.conf", "/var/apache/conf/server.crt" ],
                    "command": "stop" }
            ]
        },
        "ws_server": {
            'control': "wait",
            'roles': [ "frontend" ],
            'requires': [ "httpd" ],
            'pidfile': "{piddir}/{Task_name}.pid",
            'commands': {
                "start": [ "ws_server", "-l", "{wsurl}", "-p", "{Task_pidfile}" ]
            },
            'events': [
                { "type": "python", "command": "stop" }
            ]
        },
        "db_server": {
            'control': "wait",
            'roles': [ "backend" ],
            'requires': [ "httpd" ],
            'defines': { "conf": "{confdir}/db.conf" },
            'pidfile': "{piddir}/{Task_name}.pid",
            'commands': {
                "start": [ "db_server", "-c", "{conf}", "-n", "-p", "{Task_pidfile}" ]
            },
            'events': [
                { "type": "self", "command": "stop" }
            ]
        },
    }
}
