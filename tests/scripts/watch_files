#!/usr/bin/env python
# ________________________________________________________________________
#
#  Copyright (C) 2015 Andrew Fullford
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
# ________________________________________________________________________
#

import os, argparse, logging
import taskforce.poll as poll
import taskforce.watch_files as watch_files

p = argparse.ArgumentParser(
    formatter_class=argparse.RawDescriptionHelpFormatter,
    description="Test the %s module\n%s" % (os.path.splitext(os.path.basename(__file__))[0], watch_files.watch.__doc__))

p.add_argument('-v', '--verbose', action='store_true', help='Verbose logging for debugging')
p.add_argument('-q', '--quiet', action='store_true', help='Warnings and errors only')
p.add_argument('-e', '--log-stderr', action='store_true', help='Ignored, always logs to stderr')
p.add_argument('-r', '--poll-rate', action='store', type=float, default=5.0, help='Poll rate in seconds')
p.add_argument('-T', '--agg-timeout', action='store', type=float, default=0.0, help='Aggregation timeout')
p.add_argument('-L', '--agg-limit', action='store', type=int, default=0, help='Aggregation limit')
p.add_argument('-p', '--polling', action='store_true', help='Using polling instead of file-system events')
p.add_argument('-R', '--require', action='store_true', help='Require watched files to be present')
p.add_argument('file', nargs='+', help='List of files to watch')

args = p.parse_args()

log = logging.getLogger()
log.addHandler(logging.StreamHandler())
if args.verbose:
    log.setLevel(logging.DEBUG)
if args.quiet:
    log.setLevel(logging.WARNING)

snoop = watch_files.watch(polling=args.polling, log=log, timeout=args.agg_timeout, limit=args.agg_limit)
log.info("Watching in %s mode", snoop.get_mode_name())
snoop.add(args.file, missing=not args.require)

pset = poll.poll()
pset.register(snoop, poll.POLLIN)

while True:
    try:
        evlist = pset.poll(args.poll_rate * 1000)
    except OSError as e:
        if e.errno != errno.EINTR:
            log.error("Select failed -- %s", str(e))
        break
    if not evlist:
        snoop.scan()
    else:
        print('Changes detected ...')
        for path in snoop.get():
            print('    ' + path)
